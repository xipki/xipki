source file:./qa/qa.d/initdb.script

echo "Sleeping 1 second"
sleep 1

ca:restart

echo "#################################################################"
echo "#                        Load rootca.json                       #"
echo "#################################################################"

if { $TOKEN_TYPE equals "pkcs11" } then {
  CA_SIGNER_CONF = "algo=$SIGALGO,slot=$SLOT,key-label=rootca1"
} else {
  CA_SIGNER_CONF = "password=1234,keystore=file:output/rootca1.p12,algo=$SIGALGO"
}

xi:copy-file -f qa/qa.d/template.rootca.json qa/qa.d/rootca.json

xi:replace --old "REPLACEME-SUBJECT" --new "CN=rootca1,O=myorg,C=DE" \
  qa/qa.d/rootca.json

xi:replace --old "REPLACEME-CMP_SIGALGO" --new "$CMP_SIGALGO" \
  qa/qa.d/rootca.json

xi:replace --old "REPLACEME-TOKEN_TYPE" --new "$TOKEN_TYPE" \
  qa/qa.d/rootca.json

xi:replace --old "REPLACEME-CA_SIGNERCONF" --new "$CA_SIGNER_CONF" \
  qa/qa.d/rootca.json

xi:replace --old "REPLACEME-SIGALGO" --new "$SIGALGO" \
  qa/qa.d/rootca.json

xi:replace --old "REPLACEME-HASH" --new "$STDHASH" \
  qa/qa.d/rootca.json

xi:replace --old "REPLACEME-OUTFORM" --new "$OUTFORM" \
  qa/qa.d/rootca.json

if { $TOKEN_TYPE equals "pkcs11" } then {
  ca:refresh-token --type pkcs11
}

ca:load-conf --conf-file qa/qa.d/rootca.json \
  --outform $OUTFORM \
  --out-dir output

xi:move-file output/ca-rootca1.crt output/rootca1.crt

## Update the certificate in the device
if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:update-cert-p11 --slot $SLOT --label rootca1 --cert output/rootca1.crt
} else {
  xi:update-cert-p12 --p12 output/rootca1.p12 --password 1234 --cert output/rootca1.crt
}

## Generate keys and CSR for subca1
if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:csr-p11 --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAPSS \
    --slot $SLOT --label subca1 \
    --outform $OUTFORM \
    --out output/subca1.csr \
    --subject "CN=subca1,O=myorg,C=DE"
} else {
  xi:csr-p12 --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAPSS \
    --p12 output/subca1.p12 --password 1234 \
    --outform $OUTFORM \
    --out output/subca1.csr \
    --subject "CN=subca1,O=myorg,C=DE"
}

ca:enroll-cert --ca rootca1 --csr output/subca1.csr \
  --outform $OUTFORM \
  --out output/subca1.crt --profile subca

if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:update-cert-p11 --slot $SLOT --label subca1 \
    --cert output/subca1.crt \
} else {
  xi:update-cert-p12 --p12 output/subca1.p12 --password 1234 \
    --cert output/subca1.crt --ca-cert output/rootca1.crt
}

## Generate keys and CSR for subcawithcrl
if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:csr-p11 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAPSS \
    --slot $SLOT --label subcawithcrl1 \
    --outform $OUTFORM \
    --out output/subcawithcrl1.csr \
    --subject "CN=subcawithcrl, O=myorg, C=DE" \
    --subject-alt-name "[1]info@myorg.org" \
    --subject-alt-name "[2]myorg.org" \
    --subject-alt-name "[5]edi-nameAssigner-1=edi-partyName1" \
    --subject-alt-name "[6]http://myorg.org/abc" \
    --subject-alt-name "[7]192.168.0.1" \
    --subject-alt-name "[8]1.2.3.4" \
    --subject-alt-name "[0]2.5.4.10=long organization name" \
    --subject-info-access "1.3.6.1.5.5.7.48.5=[6]http://myorg.org/abc" \
    --keyusage cRLSign
} else {
  xi:csr-p12 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAPSS \
    --p12 output/subcawithcrl1.p12 --password 1234 \
    --outform $OUTFORM \
    --out output/subcawithcrl1.csr \
    --subject "CN=subcawithcrl1, O=myorg, C=DE" \
    --subject-alt-name "[1]info@myorg.org" \
    --subject-alt-name "[2]myorg.org" \
    --subject-alt-name "[5]edi-nameAssigner-1=edi-partyName1" \
    --subject-alt-name "[6]http://myorg.org/abc" \
    --subject-alt-name "[7]192.168.0.1" \
    --subject-alt-name "[8]1.2.3.4" \
    --subject-alt-name "[0]2.5.4.10=long organization name" \
    --subject-info-access "1.3.6.1.5.5.7.48.5=[6]http://myorg.org/abc" \
    --keyusage cRLSign
}

ca:enroll-cert --ca rootca1 --csr output/subcawithcrl1.csr \
  --outform $OUTFORM \
  --out output/subcawithcrl1.crt \
  --profile subca-Complex

if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:update-cert-p11 --slot $SLOT --label subcawithcrl1 \
    --cert output/subcawithcrl1.crt \
} else {
  xi:update-cert-p12 --p12 output/subcawithcrl1.p12 --password 1234 \
    --cert output/subcawithcrl1.crt --ca-cert output/rootca1.crt
}

## Generate keys and CSR for OCSPResponder
if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:csr-p11 --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAPSS \
    --slot $SLOT --label ocsp99 \
    --outform $OUTFORM \
    --out output/ocsp99.csr \
    --subject "CN=ocsp99,2.5.4.97=VATDE-123456789,O=myorg,C=DE"
} else {
  xi:csr-p12 --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAPSS \
    --p12 output/ocsp99.p12 --password 1234 \
    --outform $OUTFORM \
    --out output/ocsp99.csr \
    --subject "CN=ocsp99,2.5.4.97=VATDE-123456789,O=myorg,C=DE"
}

ca:enroll-cert --ca rootca1 --csr output/ocsp99.csr \
  --outform $OUTFORM \
  --out output/ocsp99.crt \
  --profile ocsp

if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:update-cert-p11 --slot $SLOT --label ocsp99 --cert output/ocsp99.crt \
} else {
  xi:update-cert-p12 --p12 output/ocsp99.p12 --password 1234 \
    --cert output/ocsp99.crt --ca-cert output/rootca1.crt
}

ca:caprofile-rm -f --ca rootca1 --profile ocsp

if { $TOKEN_TYPE equals "pkcs11" } then {
  ca:refresh-token --type pkcs11
}

echo "#################################################################"
echo "#                        Add subca with OCSP                    #"
echo "#################################################################"
## Add CA

if { $TOKEN_TYPE equals "pkcs11" } then {
  CA_SIGNER_CONF = "algo=$SIGALGO,slot=$SLOT,key-label=subca1"
} else {
  CA_SIGNER_CONF = "password=1234,keystore=file:output/subca1.p12,algo=$SIGALGO"
}

xi:copy-file -f qa/qa.d/template.subca.json qa/qa.d/subca.json

xi:replace --old "REPLACEME-CMP_SIGALGO" --new "$CMP_SIGALGO" \
  qa/qa.d/subca.json

xi:replace --old "REPLACEME-TOKEN_TYPE" --new "$TOKEN_TYPE" \
  qa/qa.d/subca.json

xi:replace --old "REPLACEME-CA_SIGNERCONF" --new "$CA_SIGNER_CONF" \
  qa/qa.d/subca.json

xi:replace --old "REPLACEME-SIGALGO" --new "$SIGALGO" \
  qa/qa.d/subca.json

xi:replace --old "REPLACEME-HASH" --new "$STDHASH" \
  qa/qa.d/subca.json

ca:load-conf --conf-file qa/qa.d/subca.json

# Remove CertProfile rootca

ca:profile-rm -f rootca

## Restart the CA
#ca:restart

echo "#################################################################"
echo "#                       Add subca with CRL                      #"
echo "#################################################################"
## Add CA

if { $TOKEN_TYPE equals "pkcs11" } then {
  CA_SIGNER_CONF = "algo=$SIGALGO,slot=$SLOT,key-label=subcawithcrl1"
} else {
  CA_SIGNER_CONF = "password=1234,keystore=file:output/subcawithcrl1.p12,algo=$SIGALGO"
}

xi:copy-file -f qa/qa.d/template.subcawithcrl.json \
  qa/qa.d/subcawithcrl.json

xi:replace --old "REPLACEME-CMP_SIGALGO" --new "$CMP_SIGALGO" \
  qa/qa.d/subcawithcrl.json

xi:replace --old "REPLACEME-TOKEN_TYPE" --new "$TOKEN_TYPE" \
  qa/qa.d/subcawithcrl.json

xi:replace --old "REPLACEME-CA_SIGNERCONF" --new "$CA_SIGNER_CONF" \
  qa/qa.d/subcawithcrl.json

xi:replace --old "REPLACEME-SIGALGO" --new "$SIGALGO" \
  qa/qa.d/subcawithcrl.json

xi:replace --old "REPLACEME-HASH" --new "$STDHASH" \
  qa/qa.d/subcawithcrl.json

ca:load-conf --conf-file qa/qa.d/subcawithcrl.json

source file:./qa/qa.d/scep-server.script
